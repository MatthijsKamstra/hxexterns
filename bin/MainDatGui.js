// Generated by Haxe 3.4.7
(function () { "use strict";
var MainDatGui = function() {
	this.init0();
};
MainDatGui.__name__ = true;
MainDatGui.main = function() {
	var app = new MainDatGui();
};
MainDatGui.prototype = {
	FizzyText: function() {
		this.message = "dat.gui";
		this.speed = 0.8;
		this.displayOutline = false;
		this.noiseStrength = 0.8;
		this.growthSpeed = 0.8;
		this.maxSize = 0.8;
		this.explode = function() {
			console.log("booom");
		};
		this.color0 = "#ffae23";
		this.color1 = [0,128,255];
		this.color2 = [0,128,255,0.3];
		this.color3 = { h : 350, s : 0.9, v : 0.3};
		return { message : this.message, speed : this.speed, maxSize : this.maxSize, noiseStrength : this.noiseStrength, growthSpeed : this.growthSpeed, displayOutline : this.displayOutline, explode : this.explode};
	}
	,init0: function() {
		var text = this.FizzyText();
		var gui = new dat.gui.GUI();
		gui.add(text,"message");
		gui.add(text,"speed",-5,5);
		gui.add(text,"displayOutline");
		gui.add(text,"explode");
		var f1 = gui.addFolder("Flow Field");
		f1.add(text,"speed");
		f1.add(text,"noiseStrength");
		var f2 = gui.addFolder("Letters");
		f2.add(text,"growthSpeed");
		f2.add(text,"maxSize");
		f2.add(text,"message");
		var controller = gui.add(text,"maxSize",0,10);
		controller.onChange(function(value) {
			console.log("value: " + value);
		});
		controller.onFinishChange(function(value1) {
			js_Browser.alert("The new value is " + value1);
		});
	}
};
Math.__name__ = true;
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
String.__name__ = true;
Array.__name__ = true;
MainDatGui.main();
})();
