// Generated by Haxe 3.4.7
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
var MainDatGui = function() {
	this.color3 = { h : 350, s : 0.9, v : 0.3};
	this.color2 = [0,128,255,0.3];
	this.color1 = [0,128,255];
	this.color0 = "#ffae23";
	this.explode = function() {
		console.log("booom");
	};
	this.maxSize = 0.8;
	this.growthSpeed = 0.8;
	this.noiseStrength = 0.8;
	this.displayOutline = false;
	this.speed = 0.8;
	this.message = "dat.gui";
	this.init0();
	this.init1();
};
MainDatGui.__name__ = true;
MainDatGui.main = function() {
	var app = new MainDatGui();
};
MainDatGui.prototype = {
	init1: function() {
		var gui = new js_dat_GUIX();
		gui.add(this,"message");
		gui.add(this,"displayOutline");
		gui.add(this,"explode");
		gui.add(this,"fail");
	}
	,init0: function() {
		var gui = new dat.gui.GUI();
		gui.add(this,"message");
		gui.add(this,"speed",-5,5);
		gui.add(this,"displayOutline");
		gui.add(this,"explode");
		var f1 = gui.addFolder("Flow Field");
		f1.add(this,"speed");
		f1.add(this,"noiseStrength");
		var f2 = gui.addFolder("Letters");
		f2.add(this,"growthSpeed");
		f2.add(this,"maxSize");
		f2.add(this,"message");
		gui.addColor(this,"color0");
		gui.addColor(this,"color1");
		gui.addColor(this,"color2");
		gui.addColor(this,"color3");
		var controller = gui.add(this,"maxSize",0,10);
		controller.onChange(function(value) {
			console.log("value: " + value);
		});
		controller.onFinishChange(function(value1) {
			js_Browser.alert("The new value is " + value1);
		});
	}
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var Type = function() { };
Type.__name__ = true;
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_dat_GUIX = function(option) {
	dat.gui.GUI.call(this,option);
};
js_dat_GUIX.__name__ = true;
js_dat_GUIX.myHandler = function(msg,stack) {
	js_Browser.alert(msg);
	return true;
};
js_dat_GUIX.__super__ = dat.gui.GUI;
js_dat_GUIX.prototype = $extend(dat.gui.GUI.prototype,{
	add: function(object,property) {
		var isProperty = false;
		var fieldsArr = Type.getClassFields(object);
		var _g1 = 0;
		var _g = fieldsArr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var field = fieldsArr[i];
			console.log(field);
			if(Reflect.getProperty(object,field) == property) {
				console.log(">>>>>> found it " + Std.string(object) + ", " + field + ", " + property);
				isProperty = true;
			}
		}
		if(!isProperty) {
			throw new js__$Boot_HaxeError("mispoes");
		}
		return dat.gui.GUI.prototype.add.call(this,object,property);
	}
});
String.__name__ = true;
Array.__name__ = true;
MainDatGui.main();
})();
