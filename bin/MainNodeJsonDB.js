// Generated by Haxe 3.4.7
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var MainNodeJsonDB = function() {
	this.init0();
	this.init1();
	this.init2();
};
MainNodeJsonDB.main = function() {
	var app = new MainNodeJsonDB();
};
MainNodeJsonDB.prototype = {
	init0: function() {
		var db = new JsonDB("myDataBase",true,false);
		db.push("/test1","super test");
		db.push("/test2/my/test",5);
		db.push("/test3",{ test : "test", json : { test : ["test"]}});
		db.push("/test3",{ "new" : "cool", json : { important : 5}},false);
		db.push("/test2/my/test/",10,false);
		var data = db.getData("/");
		var data1 = db.getData("/test1");
		try {
			var data2 = db.getData("/test1/test/dont/work");
		} catch( error ) {
			console.error(error);
		}
		db["delete"]("/test1");
		db.save();
		db.reload();
	}
	,init1: function() {
		var db = new JsonDB("myDataBase",true,false);
		db.push("/arraytest/myarray[0]",{ obj : "test"},true);
		var testString = db.getData("/arraytest/myarray[0]/obj");
		db["delete"]("/arraytest/myarray[0]");
	}
	,init2: function() {
		var db = new JsonDB("myDataBase",true,false);
		db.push("/arraytest/myarray[]",{ obj : "test"},true);
		db.push("/arraytest/myarray[]/myTest","test",true);
	}
	,init3: function() {
		var db = new JsonDB("myDataBase",true,false);
		db.push("/arraytest/lastItemArray",[1,2,3],true);
		db.getData("/arraytest/lastItemArray[-1]");
		db["delete"]("/arraytest/lastItemArray[-1]");
		db.getData("/arraytest/lastItemArray[-1]");
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.alloc = function(length) {
	return new haxe_io_Bytes(new ArrayBuffer(length));
};
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
var js_node_buffer_Buffer = require("buffer").Buffer;
var JsonDB = require("node-json-db");
MainNodeJsonDB.main();
})();
